# -*- coding: utf-8 -*-
"""10dayAverage_procdata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZF7R_l6Jmqd0cVZl4Sem78ozgOqIwcF
"""





"""**10 day averaging**"""



import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# ===== CONFIGURATION =====
NUM_DAYS = 10  # Number of days to average over
CSV_FILE = 'processed_res3_data.csv'  # Your res3 data file

# ===== HELPER FUNCTIONS =====
def simulate_h3_children(res3_cell, num_children=3):
    """
    Simulate creating res8 children from a res3 parent.
    In real implementation, use: h3.h3_to_children(res3_cell, 8)
    """
    children = []
    for i in range(num_children):
        # Simple simulation: append suffix to parent cell
        children.append(f"{res3_cell}_{i:03d}")
    return children

def simulate_h3_to_parent(res8_cell):
    """
    Simulate getting res3 parent from res8 cell.
    In real implementation, use: h3.h3_to_parent(res8_cell, 3)
    """
    # Remove the suffix we added in simulate_h3_children
    return res8_cell.split('_')[0]

def calculate_thresholds_for_day(df_res3, day_num):
    """
    Calculate thresholds for one day (simulating the thresholding() function output).
    This replicates the logic from train_clusters() and calculate_thresholds().
    """
    daily_thresholds = []

    for _, row in df_res3.iterrows():
        # Simulate daily variation (noise factor)
        daily_noise = np.random.uniform(0.9, 1.1)

        # Apply the mavg logic from train_clusters
        mavg = row['mavg'] if row['mavg'] > 0.05 else row['base'] * 0.05

        # Simplified threshold calculation
        # In real code, this comes from GMM cluster characteristics
        # Here we use a simplified version based on mavg and base
        base_factor = mavg * daily_noise

        daily_thresholds.append({
            'day': day_num,
            'h3_3': row['h3_3'],
            'country': row['country'],
            'base': row['base'],
            'mavg': row['mavg'],
            'threshold_1': row['base'] + (base_factor * 5.4),
            'threshold_3': row['base'] + (base_factor * 3.8),
            'threshold_5': row['base'] + (base_factor * 2.2)
        })

    return pd.DataFrame(daily_thresholds)

# ===== STEP 1: Load res3 data =====
print("=" * 70)
print("STEP 1: Loading res3 data from CSV")
print("=" * 70)

df_res3 = pd.read_csv(CSV_FILE)
print(f"\nLoaded {len(df_res3)} res3 cells")
print(f"Columns: {list(df_res3.columns)}")
print(f"\nFirst 5 rows:")
print(df_res3.head())

# ===== STEP 2: Generate 10 days of thresholds =====
print("\n" + "=" * 70)
print(f"STEP 2: Generating {NUM_DAYS} days of threshold data")
print("=" * 70)

all_daily_thresholds = []

for day in range(1, NUM_DAYS + 1):
    print(f"Calculating thresholds for day {day}...")
    day_thresholds = calculate_thresholds_for_day(df_res3, day)
    all_daily_thresholds.append(day_thresholds)

df_all_daily = pd.concat(all_daily_thresholds, ignore_index=True)

print(f"\nGenerated {len(df_all_daily)} threshold records")
print(f"({len(df_res3)} cells × {NUM_DAYS} days)")
print(f"\nSample of daily thresholds:")
print(df_all_daily.head(10))

# ===== STEP 3: Calculate 10-day averages for each res3 cell =====
print("\n" + "=" * 70)
print("STEP 3: Calculating 10-day averaged thresholds")
print("=" * 70)

df_avg_thresholds = df_all_daily.groupby(['h3_3', 'country']).agg({
    'base': 'first',  # Base should be constant
    'mavg': 'first',  # Mavg should be constant
    'threshold_1': 'mean',
    'threshold_3': 'mean',
    'threshold_5': 'mean'
}).reset_index()

# Rename for clarity
df_avg_thresholds = df_avg_thresholds.rename(columns={
    'threshold_1': 'threshold_1_avg',
    'threshold_3': 'threshold_3_avg',
    'threshold_5': 'threshold_5_avg'
})

print(f"\nAveraged thresholds for {len(df_avg_thresholds)} res3 cells")
print(f"\nFirst 10 averaged thresholds:")
print(df_avg_thresholds.head(10))

# ===== STEP 4: Create sample assets (res8) =====
print("\n" + "=" * 70)
print("STEP 4: Creating sample assets at res8 resolution")
print("=" * 70)

# Create assets from first 10 res3 cells (adjust as needed)
sample_assets = []

for idx, row in df_res3.head(10).iterrows():
    # Create 2 res8 assets per res3 cell
    res8_children = simulate_h3_children(row['h3_3'], num_children=2)

    for asset_idx, res8_cell in enumerate(res8_children):
        sample_assets.append({
            'asset_id': f"asset_{idx}_{asset_idx}",
            'h3_res8': res8_cell,
            'country': row['country']
        })

df_assets = pd.DataFrame(sample_assets)

# Map assets to their parent res3 cells
df_assets['h3_res3_parent'] = df_assets['h3_res8'].apply(simulate_h3_to_parent)

print(f"\nCreated {len(df_assets)} sample assets")
print(f"\nSample assets:")
print(df_assets.head(10))

# ===== STEP 5: Assign averaged thresholds to assets =====
print("\n" + "=" * 70)
print("STEP 5: Assigning averaged thresholds to assets")
print("=" * 70)

# Merge assets with their parent res3 averaged thresholds
df_final = df_assets.merge(
    df_avg_thresholds[['h3_3', 'country', 'threshold_1_avg', 'threshold_3_avg', 'threshold_5_avg']],
    left_on=['h3_res3_parent', 'country'],
    right_on=['h3_3', 'country'],
    how='left'
)

# Clean up column names
df_final = df_final.rename(columns={
    'threshold_1_avg': 'threshold_1',
    'threshold_3_avg': 'threshold_3',
    'threshold_5_avg': 'threshold_5'
})

# Select final columns
df_final = df_final[['asset_id', 'h3_res8', 'h3_res3_parent', 'country',
                      'threshold_1', 'threshold_3', 'threshold_5']]

print(f"\nFinal asset thresholds ({len(df_final)} assets):")
print(df_final)

# ===== STEP 6: Show statistics =====
print("\n" + "=" * 70)
print("SUMMARY STATISTICS")
print("=" * 70)

print(f"\n1. Input data:")
print(f"   - {len(df_res3)} res3 cells")
print(f"   - Countries: {df_res3['country'].nunique()}")

print(f"\n2. Daily thresholds generated:")
print(f"   - {len(df_all_daily)} records ({len(df_res3)} cells × {NUM_DAYS} days)")

print(f"\n3. Averaged thresholds:")
print(f"   - {len(df_avg_thresholds)} res3 cells with stable thresholds")

print(f"\n4. Assets created:")
print(f"   - {len(df_assets)} res8 assets")
print(f"   - {len(df_final)} assets with assigned thresholds")

# Show threshold range
print(f"\n5. Threshold ranges:")
print(f"   - Threshold 1: {df_final['threshold_1'].min():.2f} to {df_final['threshold_1'].max():.2f}")
print(f"   - Threshold 3: {df_final['threshold_3'].min():.2f} to {df_final['threshold_3'].max():.2f}")
print(f"   - Threshold 5: {df_final['threshold_5'].min():.2f} to {df_final['threshold_5'].max():.2f}")

# ===== STEP 7: Optional - Show variation example =====
print("\n" + "=" * 70)
print("EXAMPLE: Threshold variation over 10 days for one cell")
print("=" * 70)

sample_cell = df_res3.iloc[0]['h3_3']
sample_country = df_res3.iloc[0]['country']

df_sample_variation = df_all_daily[
    (df_all_daily['h3_3'] == sample_cell) &
    (df_all_daily['country'] == sample_country)
][['day', 'threshold_1', 'threshold_3', 'threshold_5']]

print(f"\nCell: {sample_cell}")
print(f"Country: {sample_country}")
print(f"\nDaily variations:")
print(df_sample_variation)

avg_row = df_avg_thresholds[
    (df_avg_thresholds['h3_3'] == sample_cell) &
    (df_avg_thresholds['country'] == sample_country)
]

print(f"\n10-day averages:")
print(f"Threshold 1: {avg_row['threshold_1_avg'].values[0]:.2f}")
print(f"Threshold 3: {avg_row['threshold_3_avg'].values[0]:.2f}")
print(f"Threshold 5: {avg_row['threshold_5_avg'].values[0]:.2f}")

print("\n" + "=" * 70)
print("DONE! Final asset thresholds are in df_final")
print("=" * 70)



