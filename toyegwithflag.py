# -*- coding: utf-8 -*-
"""ToyEgWithFlag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oj3NwLDnE7TSvCjSUaZ-k7wY23-ggjPO
"""





import pandas as pd
import numpy as np
import random

# Step 1: Simulate 10 days of res3 threshold data
dates = pd.date_range(end='2025-09-30', periods=10).strftime('%Y-%m-%d')
res3_cells = [f'res3_{i}' for i in range(5)]
res3_thresholds = []

for date in dates:
    for res3 in res3_cells:
        res3_thresholds.append({
            'date': date,
            'res3_cell': res3,
            'threshold_3': np.random.uniform(50, 150),
            'threshold_5': np.random.uniform(100, 200),
            'base': np.random.uniform(20, 80)  # base value for res3
        })

res3_df = pd.DataFrame(res3_thresholds)

# Step 2: Simulate asset -> res8 -> res3 mapping
asset_titles = [f'Asset_{i}' for i in range(8)]
asset_data = []

for title in asset_titles:
    res3 = random.choice(res3_cells)
    asset_data.append({
        'title': title,
        'res3_cell': res3,              # parent res3 cell
        'base_8': np.random.uniform(30, 90)  # asset base value
    })

asset_df = pd.DataFrame(asset_data)

# Step 3: Average res3 thresholds over the 10-day period
avg_thresholds = res3_df.groupby('res3_cell').agg({
    'threshold_3': 'mean',
    'threshold_5': 'mean',
    'base': 'mean'
}).reset_index().rename(columns={'base': 'base_3'})

# Step 4: Merge asset data with res3 thresholds
final_df = asset_df.merge(avg_thresholds, on='res3_cell', how='left')

# Step 5: Scale thresholds based on base_8 / base_3 ratio
final_df['scaling_factor'] = final_df['base_8'] / final_df['base_3']
final_df['threshold_3_scaled'] = final_df['threshold_3'] * final_df['scaling_factor']
final_df['threshold_5_scaled'] = final_df['threshold_5'] * final_df['scaling_factor']

# Display final output
final_output = final_df[['title', 'res3_cell', 'base_8', 'base_3', 'threshold_3_scaled', 'threshold_5_scaled']]
final_output.head()





"""Flag up volitality"""



# Step 6: Calculate volatility flag for each res3 cell

# Threshold for volatility: std deviation above this implies high variability
volatility_threshold = 10

# Compute standard deviation of threshold_3 across 10 days
volatility_df = res3_df.groupby('res3_cell')['threshold_3'].std().reset_index()
volatility_df['is_volatile'] = volatility_df['threshold_3'] > volatility_threshold

# Merge volatility flag into final output
final_output = final_output.merge(volatility_df[['res3_cell', 'is_volatile']], on='res3_cell', how='left')

# Display with volatility flag
final_output.head()











